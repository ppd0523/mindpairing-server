# Generated by Django 4.1.7 on 2023-03-15 07:17

import common_utils
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('hashtag', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Board',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.PositiveSmallIntegerField()),
                ('category', models.CharField(max_length=20)),
                ('hidden', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'board category',
                'db_table': 'board',
                'ordering': ('index',),
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(validators=[django.core.validators.MaxLengthValidator(200)])),
                ('like', models.PositiveIntegerField(default=0)),
                ('report', models.PositiveIntegerField(default=0)),
                ('hidden', models.BooleanField(default=False)),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('delete_at', models.DateTimeField(blank=True, null=True)),
                ('parent_comment_id', models.OneToOneField(blank=True, db_column='parent_comment_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='parent_comment', to='board.comment', verbose_name='parent comment')),
            ],
            options={
                'db_table': 'comment',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(validators=[django.core.validators.MaxLengthValidator(200)])),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('delete_at', models.DateTimeField(blank=True, null=True)),
                ('read', models.BooleanField(default=False)),
                ('receiver_id', models.ForeignKey(db_column='receiver_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='received_msg_set', to=settings.AUTH_USER_MODEL)),
                ('sender_id', models.ForeignKey(db_column='sender_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_msg_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User message',
                'db_table': 'user_message',
                'ordering': ('create_at',),
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mbti', models.CharField(max_length=4, validators=[django.core.validators.RegexValidator(message='Not match MBTI characters', regex='[IEx][SNx][TFx][PJx]')], verbose_name='written by')),
                ('title', models.CharField(max_length=50)),
                ('content', models.TextField(validators=[django.core.validators.MinLengthValidator(5)])),
                ('view', models.PositiveIntegerField(default=0)),
                ('like', models.PositiveIntegerField(default=0)),
                ('report', models.PositiveIntegerField(default=0)),
                ('hidden', models.BooleanField(default=False)),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('delete_at', models.DateTimeField(blank=True, null=True)),
                ('reserve_at', models.DateTimeField(blank=True, null=True)),
                ('board_id', models.ForeignKey(blank=True, db_column='board_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='post_set', to='board.board', verbose_name='board category')),
                ('hashtag_id', models.ForeignKey(blank=True, db_column='hashtag_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='post_set', to='hashtag.hashtag', verbose_name='subTopic')),
                ('user_id', models.ForeignKey(db_column='user_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='post_set', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
            ],
            options={
                'db_table': 'post',
                'ordering': ('-create_at',),
            },
        ),
        migrations.CreateModel(
            name='ReportReason',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.PositiveSmallIntegerField()),
                ('reason', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'report_reason',
                'ordering': ('index',),
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Applied'), (1, 'Accepted'), (2, 'Rejected')], default=0)),
                ('comment', models.TextField()),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('complainant_id', models.ForeignKey(db_column='complainant_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='complainant_set', to=settings.AUTH_USER_MODEL)),
                ('defendant_id', models.ForeignKey(db_column='defendant_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='defendant_set', to=settings.AUTH_USER_MODEL)),
                ('reason_id', models.ForeignKey(db_column='reason_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='report_set', to='board.reportreason')),
            ],
            options={
                'db_table': 'report',
                'ordering': ('-create_at',),
            },
        ),
        migrations.CreateModel(
            name='PostReportAssoc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_id', models.ForeignKey(blank=True, db_column='post_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='report_assoc_set', to='board.post')),
                ('report_id', models.OneToOneField(blank=True, db_column='report_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='post_assoc', to='board.report')),
            ],
            options={
                'verbose_name': 'Report(Post)',
                'db_table': 'post_report_assoc',
            },
        ),
        migrations.CreateModel(
            name='PostImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to=common_utils.path_and_rename)),
                ('name', models.CharField(max_length=50)),
                ('alt', models.CharField(blank=True, max_length=255, null=True)),
                ('post_id', models.ForeignKey(blank=True, db_column='post_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='image_set', to='board.post')),
            ],
            options={
                'db_table': 'post_image',
            },
        ),
        migrations.CreateModel(
            name='Penalty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_at', models.DateTimeField()),
                ('end_at', models.DateTimeField()),
                ('comment', models.TextField()),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('report_id', models.OneToOneField(blank=True, db_column='report_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='penalty', to='board.report')),
                ('user_id', models.ForeignKey(blank=True, db_column='user_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='penalties', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'penalty',
                'ordering': ('-update_at', '-create_at'),
            },
        ),
        migrations.CreateModel(
            name='MessageReportAssoc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('msg_id', models.OneToOneField(blank=True, db_column='msg_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='report_assoc', to='board.message')),
                ('report_id', models.OneToOneField(blank=True, db_column='report_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='msg_assoc', to='board.report')),
            ],
            options={
                'verbose_name': 'Report(Message)',
                'db_table': 'message_report_assoc',
            },
        ),
        migrations.CreateModel(
            name='LikePostAssoc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_id', models.ForeignKey(blank=True, db_column='post_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='like_post_assoc_set', to='board.post')),
                ('user_id', models.ForeignKey(blank=True, db_column='user_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='like_post_assoc_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'like post',
                'db_table': 'like_post_assoc',
            },
        ),
        migrations.CreateModel(
            name='LikeCommentAssoc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_id', models.ForeignKey(blank=True, db_column='comment_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='like_comment_assoc_set', to='board.comment')),
                ('user_id', models.ForeignKey(blank=True, db_column='user_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='like_comment_assoc_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'like comment',
                'db_table': 'like_comment_assoc',
            },
        ),
        migrations.CreateModel(
            name='CommentReportAssoc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_id', models.ForeignKey(blank=True, db_column='comment_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='report_assoc_set', to='board.comment')),
                ('report_id', models.ForeignKey(blank=True, db_column='report_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comment_assoc_set', to='board.report')),
            ],
            options={
                'verbose_name': 'Report(Comment)',
                'db_table': 'comment_report_assoc',
            },
        ),
        migrations.AddField(
            model_name='comment',
            name='post_id',
            field=models.ForeignKey(blank=True, db_column='post_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comment_set', to='board.post'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user_id',
            field=models.ForeignKey(db_column='user_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comment_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='BoardHashtagAssoc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.PositiveSmallIntegerField()),
                ('hidden', models.BooleanField(default=False)),
                ('board_id', models.ForeignKey(blank=True, db_column='board_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='hashtag_assoc_set', to='board.board', verbose_name='category')),
                ('hashtag_id', models.ForeignKey(blank=True, db_column='hashtag_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='board_assoc_set', to='hashtag.hashtag', verbose_name='topic')),
            ],
            options={
                'verbose_name': 'board subTopic',
                'db_table': 'board_hashtag_assoc',
                'ordering': ('index',),
            },
        ),
    ]
